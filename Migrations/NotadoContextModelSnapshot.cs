// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notado.DAO;

namespace Notado.Migrations
{
    [DbContext(typeof(NotadoContext))]
    partial class NotadoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Notado.Models.Adm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bairro");

                    b.Property<int>("cep");

                    b.Property<string>("cidade");

                    b.Property<string>("complemento");

                    b.Property<long>("cpf");

                    b.Property<DateTime>("dtnasc");

                    b.Property<string>("email");

                    b.Property<string>("estado");

                    b.Property<string>("nome");

                    b.Property<int>("numero");

                    b.Property<string>("rua");

                    b.Property<string>("telefone");

                    b.HasKey("Id");

                    b.ToTable("Adms");
                });

            modelBuilder.Entity("Notado.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TurmaId");

                    b.Property<string>("bairro");

                    b.Property<int>("cep");

                    b.Property<string>("cidade");

                    b.Property<string>("complemento");

                    b.Property<long>("cpf");

                    b.Property<long>("cpf_responsavel_1");

                    b.Property<string>("cpf_responsavel_2");

                    b.Property<DateTime>("dtnasc");

                    b.Property<DateTime>("dtnasc_responsavel_1");

                    b.Property<DateTime>("dtnasc_responsavel_2");

                    b.Property<string>("email");

                    b.Property<string>("email_responsavel_1");

                    b.Property<string>("email_responsavel_2");

                    b.Property<string>("escolaridade_responsavel_1");

                    b.Property<string>("escolaridade_responsavel_2");

                    b.Property<string>("estado");

                    b.Property<string>("estadoCivil_responsavel_1");

                    b.Property<string>("estadoCivil_responsavel_2");

                    b.Property<string>("nome");

                    b.Property<string>("nome_responsavel_1");

                    b.Property<string>("nome_responsavel_2");

                    b.Property<int>("numero");

                    b.Property<string>("profissao_responsavel_1");

                    b.Property<string>("profissao_responsavel_2");

                    b.Property<string>("rg_responsavel_1");

                    b.Property<string>("rg_responsavel_2");

                    b.Property<string>("rua");

                    b.Property<string>("telefone");

                    b.Property<string>("telefone2_responsavel_1");

                    b.Property<string>("telefone2_responsavel_2");

                    b.Property<string>("telefone_responsavel_1");

                    b.Property<string>("telefone_responsavel_2");

                    b.Property<string>("vinculo");

                    b.Property<string>("vinculo2");

                    b.HasKey("Id");

                    b.HasIndex("TurmaId");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("Notado.Models.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<int>("DisciplinaId");

                    b.Property<int?>("ProvaId");

                    b.Property<int?>("RecuperacaoId");

                    b.Property<int?>("TrabalhoId");

                    b.Property<int>("TurmaId");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProvaId");

                    b.HasIndex("RecuperacaoId");

                    b.HasIndex("TrabalhoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("Notado.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CargaHoraria");

                    b.Property<string>("Nome");

                    b.Property<int>("ProfessorId");

                    b.Property<int>("TurmaId");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("TurmaId");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("Notado.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<int>("Bimestre");

                    b.Property<int>("DisciplinaId");

                    b.Property<float>("Prova");

                    b.Property<float>("Recuperacao");

                    b.Property<float>("Trabalho");

                    b.HasKey("Id");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("Notado.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Disciplina");

                    b.Property<string>("Formacao");

                    b.Property<string>("bairro");

                    b.Property<int>("cep");

                    b.Property<string>("cidade");

                    b.Property<string>("complemento");

                    b.Property<long>("cpf");

                    b.Property<DateTime>("dtnasc");

                    b.Property<string>("email");

                    b.Property<string>("estado");

                    b.Property<string>("nome");

                    b.Property<int>("numero");

                    b.Property<string>("rua");

                    b.Property<string>("telefone");

                    b.HasKey("Id");

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("Notado.Models.Prova", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<int>("Bimestre");

                    b.Property<int>("DisciplinaID");

                    b.Property<float>("Nota");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaID");

                    b.ToTable("Provas");
                });

            modelBuilder.Entity("Notado.Models.Recuperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<int>("Bimestre");

                    b.Property<int>("DisciplinaID");

                    b.Property<float>("Nota");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaID");

                    b.ToTable("Recuperacoes");
                });

            modelBuilder.Entity("Notado.Models.Trabalho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<int>("Bimestre");

                    b.Property<int>("DisciplinaID");

                    b.Property<float>("Nota");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DisciplinaID");

                    b.ToTable("Trabalhos");
                });

            modelBuilder.Entity("Notado.Models.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano");

                    b.Property<string>("Divisor");

                    b.Property<string>("Ensino");

                    b.HasKey("Id");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("Notado.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Autorizacao");

                    b.Property<string>("Nome");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Notado.Models.Aluno", b =>
                {
                    b.HasOne("Notado.Models.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notado.Models.Avaliacao", b =>
                {
                    b.HasOne("Notado.Models.Aluno", "Aluno")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Notado.Models.Disciplina", "Disciplina")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Notado.Models.Prova", "Prova")
                        .WithMany()
                        .HasForeignKey("ProvaId");

                    b.HasOne("Notado.Models.Recuperacao", "Recuperacao")
                        .WithMany()
                        .HasForeignKey("RecuperacaoId");

                    b.HasOne("Notado.Models.Trabalho", "Trabalho")
                        .WithMany()
                        .HasForeignKey("TrabalhoId");

                    b.HasOne("Notado.Models.Turma", "Turma")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notado.Models.Disciplina", b =>
                {
                    b.HasOne("Notado.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Notado.Models.Turma", "Turma")
                        .WithMany("Disciplinas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Notado.Models.Prova", b =>
                {
                    b.HasOne("Notado.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Notado.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Notado.Models.Recuperacao", b =>
                {
                    b.HasOne("Notado.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Notado.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Notado.Models.Trabalho", b =>
                {
                    b.HasOne("Notado.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Notado.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
